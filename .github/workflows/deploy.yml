name: Build and Deploy Blue-Green to GKE

on:
  push:
    branches:
      - main  # Deploy Blue (Production)
      - test  # Deploy Green (Test)

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: my-cluster  # Replace with your cluster name
  GKE_ZONE: us-central1  # Replace with your cluster zone
  GAR_ZONE: us-central1  # Replace with your artifact registry zone
  GAR_REPO: my-repo  # Replace with your artifact registry repo
  IMAGE: my-app  # Image name

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

      # Authenticate with Google Cloud
    - id: 'auth'
      uses: 'google-github-actions/auth@v0'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

      # Configure Docker to use Google Artifact Registry
    - name: Configure Docker for GAR
      run: gcloud auth configure-docker $GAR_ZONE-docker.pkg.dev

      # Get GKE credentials
    - name: Configure GKE credentials
      uses: google-github-actions/get-gke-credentials@v0
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}

      # Determine Deployment Version
    - name: Set Deployment Tag
      id: set-tag
      run: |
        if [[ "${{ github.ref_name }}" == "main" ]]; then
          echo "DEPLOY_TAG=blue" >> $GITHUB_ENV
        else
          echo "DEPLOY_TAG=green" >> $GITHUB_ENV
        fi

      # Build and Push Docker Image
    - name: Build and Push Docker Image
      run: |
        docker build -t $GAR_ZONE-docker.pkg.dev/$PROJECT_ID/$GAR_REPO/$IMAGE:$DEPLOY_TAG .
        docker push $GAR_ZONE-docker.pkg.dev/$PROJECT_ID/$GAR_REPO/$IMAGE:$DEPLOY_TAG

      # Deploy to Kubernetes
    - name: Deploy to GKE
      run: |
        kubectl apply -f k8s/deployment-$DEPLOY_TAG.yml
        kubectl apply -f k8s/service.yml

      # Verify Deployment
    - name: Check Deployments
      run: kubectl get deployments

    - name: Check Running Pods
      run: kubectl get pods
